/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.FuturesQuoteSimpleDataBase', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FuturesQuoteSimpleDataBase = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.FuturesQuoteSimpleDataBase, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.FuturesQuoteSimpleDataBase.displayName = 'proto.FuturesQuoteSimpleDataBase'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.FuturesQuoteSimpleDataBase.prototype.toObject = function (opt_includeInstance) {
    return proto.FuturesQuoteSimpleDataBase.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.FuturesQuoteSimpleDataBase} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.FuturesQuoteSimpleDataBase.toObject = function (includeInstance, msg) {
    var f, obj = {
      time: jspb.Message.getFieldWithDefault(msg, 1, ''),
      commodityno: jspb.Message.getFieldWithDefault(msg, 2, ''),
      contractno: jspb.Message.getFieldWithDefault(msg, 3, ''),
      lastprice: jspb.Message.getFieldWithDefault(msg, 4, ''),
      openprice: jspb.Message.getFieldWithDefault(msg, 5, ''),
      highprice: jspb.Message.getFieldWithDefault(msg, 6, ''),
      lowprice: jspb.Message.getFieldWithDefault(msg, 7, ''),
      closeprice: jspb.Message.getFieldWithDefault(msg, 8, ''),
      bidprice: jspb.Message.getFieldWithDefault(msg, 9, ''),
      bidsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
      askprice: jspb.Message.getFieldWithDefault(msg, 11, ''),
      asksize: jspb.Message.getFieldWithDefault(msg, 12, 0)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FuturesQuoteSimpleDataBase}
 */
proto.FuturesQuoteSimpleDataBase.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.FuturesQuoteSimpleDataBase()
  return proto.FuturesQuoteSimpleDataBase.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FuturesQuoteSimpleDataBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FuturesQuoteSimpleDataBase}
 */
proto.FuturesQuoteSimpleDataBase.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTime(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setCommodityno(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setContractno(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setLastprice(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setOpenprice(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setHighprice(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setLowprice(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setCloseprice(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setBidprice(value)
        break
      case 10:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBidsize(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setAskprice(value)
        break
      case 12:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setAsksize(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FuturesQuoteSimpleDataBase.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.FuturesQuoteSimpleDataBase.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FuturesQuoteSimpleDataBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FuturesQuoteSimpleDataBase.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTime()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getCommodityno()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getContractno()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getLastprice()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getOpenprice()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
  f = message.getHighprice()
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    )
  }
  f = message.getLowprice()
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    )
  }
  f = message.getCloseprice()
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    )
  }
  f = message.getBidprice()
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    )
  }
  f = message.getBidsize()
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    )
  }
  f = message.getAskprice()
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    )
  }
  f = message.getAsksize()
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    )
  }
}

/**
 * optional string time = 1;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getTime = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setTime = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string commodityNo = 2;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getCommodityno = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setCommodityno = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string contractNo = 3;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getContractno = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setContractno = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string lastPrice = 4;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getLastprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setLastprice = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string openPrice = 5;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getOpenprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setOpenprice = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string highPrice = 6;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getHighprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setHighprice = function (value) {
  jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string lowPrice = 7;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getLowprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setLowprice = function (value) {
  jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string closePrice = 8;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getCloseprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setCloseprice = function (value) {
  jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string bidPrice = 9;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getBidprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setBidprice = function (value) {
  jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional int64 bidSize = 10;
 * @return {number}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getBidsize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0))
}

/** @param {number} value */
proto.FuturesQuoteSimpleDataBase.prototype.setBidsize = function (value) {
  jspb.Message.setProto3IntField(this, 10, value)
}

/**
 * optional string askPrice = 11;
 * @return {string}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getAskprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/** @param {string} value */
proto.FuturesQuoteSimpleDataBase.prototype.setAskprice = function (value) {
  jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * optional int64 askSize = 12;
 * @return {number}
 */
proto.FuturesQuoteSimpleDataBase.prototype.getAsksize = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0))
}

/** @param {number} value */
proto.FuturesQuoteSimpleDataBase.prototype.setAsksize = function (value) {
  jspb.Message.setProto3IntField(this, 12, value)
}

goog.object.extend(exports, proto)
